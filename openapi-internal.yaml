openapi: 3.0.3
info:
  title: Sample API for GitBook Testing
  description: |
    A simple API spec to test GitBook Git Sync, code snippet auto-generation, and profile-based filtering using tags or custom extensions.
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
tags:
  - name: Users
    description: Endpoints related to user management
  - name: Orders
    description: Endpoints related to order processing
paths:
  /orders:
    post:
      summary: Create order
      description: Create a new order for a user
      tags:
        - Orders
      x-profiles:
        - partner
        - internal
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      x-codeSamples:
        - lang: cURL
          source: |
            curl -X POST "https://api.example.com/v1/orders" \
              -H "Authorization: Bearer <token>" \
              -H "Content-Type: application/json" \
              -d '{"productId": "abc123", "quantity": 2}'
        - lang: Python
          source: |
            import requests
            r = requests.post(
              "https://api.example.com/v1/orders",
              headers={"Authorization": f"Bearer {token}"},
              json={"productId": "abc123", "quantity": 2}
            )
            print(r.json())
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: u123
        email:
          type: string
          format: email
          example: user@example.com
    Order:
      type: object
      properties:
        id:
          type: string
          example: o456
        productId:
          type: string
          example: abc123
        quantity:
          type: integer
          example: 29
        status:
          type: string
          enum:
            - pending
            - confirmed
            - shipped
          example: pending
